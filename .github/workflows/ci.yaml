name: release harmony

on:
  push:
    branches:
      - main
    tags:
      - published

jobs:
  temp:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout harmony core code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: harmony

      - name: Build preview works
        run: |
          touch $GITHUB_WORKSPACE/harmony-linux
          mv $GITHUB_WORKSPACE/harmony-linux ./scripts/docker/harmony
          VERSION=$(git describe --always --long --dirty)
          echo "image_version=$VERSION" >> $GITHUB_ENV
        working-directory: harmony
      
      - name: Output preview works
        run: echo "tag is ${{ env.image_version }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./harmony/scripts/docker
          file: ./Dockerfile
          push: true
          tags: |
            haodi/harmony:latest
            haodi/harmony:${{ env.image_version }}"

  # build:
  #   name: Build harmony binary
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-18.04]

  #   steps:
  #     - name: Set up Go 1.14
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.14.7

  #     - name: Checkout dependence repo
  #       uses: actions/checkout@v2
  #       with:
  #         repository: harmony-one/mcl
  #         path: mcl

  #     - name: Checkout dependence repo
  #       uses: actions/checkout@v2
  #       with:
  #         repository: harmony-one/bls
  #         path: bls

  #     - name: Checkout harmony core code
  #       uses: actions/checkout@v2
  #       with:
  #         path: harmony
  #         fetch-depth: 0

  #     - name: Build harmony binary
  #       if: matrix.os == 'ubuntu-18.04'
  #       run: |
  #         make linux_static
  #         mv ./bin/harmony ./bin/harmony-linux
  #       working-directory: harmony

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: harmony
  #         path: harmony/bin/harmony-linux
  #         retention-days: 1

  # test:
  #   name: Test harmony binary
  #   needs: build
  #   runs-on: ubuntu-18.04

  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: harmony

  #     - name: Display structure of downloaded files
  #       run: ls -R

  #     - name: test harmony
  #       run: |
  #         chmod +x ./harmony-linux
  #         ./harmony-linux -V

  # docker-build:
  #   name: Build and push harmony docker image
  #   needs: build
  #   runs-on: ubuntu-18.04

  #   steps:
  #     - name: Checkout harmony core code
  #       uses: actions/checkout@v2
  #       with:
  #         path: harmony
  #         fetch-depth: 0

  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: harmony

  #     - name: Build preview works
  #       run: |
  #         mv $GITHUB_WORKSPACE/harmony-linux ./scripts/docker/harmony
  #         VERSION=$(git describe --always --long --dirty)
  #         echo "image_version=$VERSION" >> $GITHUB_ENV
  #       working-directory: harmony

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1 
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ./harmony/scripts/docker
  #         file: ./Dockerfile
  #         push: true
  #         tags: |
  #           haodi/harmony:latest
  #           haodi/harmony:${{ env.image_version }}"




  # # Push image to GitHub Packages.
  # # See also https://docs.docker.com/docker-hub/builds/
  # push:
  #   # Ensure test job passes before pushing image.
  #   needs: test

  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

  #     - name: Push image
  #       run: |
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION

