name: release harmony

on:
  push:
    branches:
      - main
    tags:
      - published

env:
  IMAGE_NAME: image

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
      matrix:
        os: [ubuntu-18.04]

    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14.7

      - name: Checkout dependence repo
        uses: actions/checkout@v2
        with:
          repository: harmony-one/mcl
          path: mcl

      - name: Checkout dependence repo
        uses: actions/checkout@v2
        with:
          repository: harmony-one/bls
          path: bls

      - name: Checkout harmony core code
        uses: actions/checkout@v2
        with:
          path: harmony

      - name: Build harmony binary
        if: matrix.os == 'ubuntu-18.04'
        run: |
          make linux_static
          mv ./bin/harmony ./bin/harmony-linux
        working-directory: harmony

      # - name: Test dir
      #   run: mkdir harmony

      # - name: Test file 1
      #   run: touch "test1.txt" && echo "test me 111" >> test1.txt
      #   working-directory: harmony

      # - name: Test file 2
      #   run: touch "test2.txt" && echo "test me 222" >> test2.txt
      #   working-directory: harmony

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: harmony
          path: harmony/bin/harmony-linux
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-18.04

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: harmony

      - name: Display structure of downloaded files
        run: ls -R

      - name: test harmony
        run: |
          chmod +x ./harmony-linux
          ./harmony-linux -V

    # docker-build:
    #   needs: build
    #   runs-on: ubuntu-18.04

    #   steps:



  # # Push image to GitHub Packages.
  # # See also https://docs.docker.com/docker-hub/builds/
  # push:
  #   # Ensure test job passes before pushing image.
  #   needs: test

  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

  #     - name: Push image
  #       run: |
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "main" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION

